// src/components/dashboard/UpcomingTrips.jsx
import React from 'react';
import { motion } from 'framer-motion';

const UpcomingTrips = ({ trips }) => {
  const getCountdown = (departureDate) => {
    const now = new Date();
    const departure = new Date(departureDate);
    const diffTime = Math.abs(departure - now);
    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
    const diffHours = Math.floor((diffTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    
    if (diffDays > 0) {
      return `${diffDays} days, ${diffHours} hours`;
    } else {
      return `${diffHours} hours`;
    }
  };

  return (
    <div className="upcoming-trips">
      <h2 className="text-xl font-orbitron text-white mb-4">Upcoming Trips</h2>
      
      {trips.length === 0 ? (
        <div className="empty-state p-6 rounded-lg bg-gray-800/30 border border-gray-700 text-center">
          <svg className="w-16 h-16 mx-auto text-gray-600 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
          </svg>
          <h3 className="text-gray-400 font-medium mb-2">No Upcoming Trips</h3>
          <p className="text-gray-500 text-sm">Book your first space adventure today!</p>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {trips.map((trip) => (
            <motion.div
              key={trip._id}
              className="trip-card p-4 rounded-lg bg-gray-800/40 border border-gray-700 overflow-hidden"
              whileHover={{ y: -5, boxShadow: '0 10px 25px -5px rgba(14, 255, 224, 0.1)' }}
            >
              <div className="flex flex-col h-full">
                <div className="relative h-32 mb-3 rounded overflow-hidden">
                  <img 
                    src={trip.destination.imageUrl} 
                    alt={trip.destination.name} 
                    className="w-full h-full object-cover"
                  />
                  <div className="absolute top-2 right-2 px-2 py-1 rounded bg-black/70 text-xs font-medium capitalize text-white">
                    {trip.seatClass}
                  </div>
                </div>
                
                <h3 className="text-lg font-orbitron text-white mb-1">{trip.destination.name}</h3>
                
                <div className="flex-grow">
                  <div className="mb-3 flex justify-between text-sm">
                    <span className="text-gray-400">Departure:</span>
                    <span className="text-white">
                      {new Date(trip.departureDate).toLocaleDateString(undefined, { 
                        month: 'short', 
                        day: 'numeric',
                        year: 'numeric'
                      })}
                    </span>
                  </div>
                  
                  <div className="countdown-timer mb-4">
                    <div className="w-full h-1 bg-gray-700 rounded-full overflow-hidden">
                      <div 
                        className="h-full bg-gradient-to-r from-purple-600 to-cyan-400"
                        style={{ width: `${Math.min(100, (new Date() - new Date(trip.bookingDate)) / (new Date(trip.departureDate) - new Date(trip.bookingDate)) * 100)}%` }}
                      ></div>
                    </div>
                    <div className="mt-2 text-center">
                      <span className="text-cyan-400 text-xs font-medium">
                        {getCountdown(trip.departureDate)} until launch
                      </span>
                    </div>
                  </div>
                </div>
                
                <div className="flex justify-between mt-2">
                  <motion.button
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                    className="px-3 py-1 text-xs rounded border border-purple-500 text-purple-400 hover:bg-purple-500/20"
                  >
                    View Details
                  </motion.button>
                  
                  <motion.button
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                    className="px-3 py-1 text-xs rounded border border-gray-600 text-gray-400 hover:bg-gray-700"
                  >
                    Manage
                  </motion.button>
                </div>
              </div>
            </motion.div>
          ))}
        </div>
      )}
    </div>
  );
};

// src/components/dashboard/AccommodationRecommendations.jsx
import React from 'react';
import { motion } from 'framer-motion';

const AccommodationRecommendations = ({ recommendations, destination }) => {
  return (
    <div className="accommodation-recommendations">
      <h2 className="text-xl font-orbitron text-white mb-4">Recommended Accommodations</h2>
      
      {!destination ? (
        <div className="p-6 rounded-lg bg-gray-800/30 border border-gray-700 text-center">
          <p className="text-gray-400">Select a destination to see accommodation recommendations</p>
        </div>
      ) : recommendations.length === 0 ? (
        <div className="p-6 rounded-lg bg-gray-800/30 border border-gray-700 text-center">
          <p className="text-gray-400">No accommodations available for {destination.name}</p>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {recommendations.slice(0, 3).map((accommodation) => (
            <motion.div
              key={accommodation._id}
              className="accommodation-card relative p-4 rounded-lg bg-gray-800/40 border border-gray-700 overflow-hidden h-full"
              whileHover={{ y: -5, boxShadow: '0 10px 25px -5px rgba(14, 255, 224, 0.1)' }}
            >
              <div className="h-40 mb-3 rounded overflow-hidden">
                <img 
                  src={accommodation.imageUrl} 
                  alt={accommodation.name} 
                  className="w-full h-full object-cover"
                />
              </div>
              
              <div className="flex justify-between items-start mb-2">
                <h3 className="text-lg font-orbitron text-white">{accommodation.name}</h3>
                <div className="flex items-center">
                  <span className="text-cyan-400 mr-1">{accommodation.rating}</span>
                  <svg className="w-4 h-4 text-cyan-400" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118l-2.8-2.034c-.783-.57-.38-1.81.588-1.81h3.462a1 1 0 00.95-.69l1.07-3.292z" />
                  </svg>
                </div>
              </div>
              
              <p className="text-gray-300 text-sm mb-3">{accommodation.location}</p>
              
              <div className="amenities mb-3">
                <div className="flex flex-wrap gap-2">
                  {accommodation.amenities.slice(0, 3).map((amenity, index) => (
                    <span 
                      key={index} 
                      className="text-xs px-2 py-1 rounded-full bg-purple-900/40 text-purple-300"
                    >
                      {amenity}
                    </span>
                  ))}
                  {accommodation.amenities.length > 3 && (
                    <span className="text-xs px-2 py-1 rounded-full bg-gray-800 text-gray-400">
                      +{accommodation.amenities.length - 3} more
                    </span>
                  )}
                </div>
              </div>
              
              <div className="mt-auto pt-2 flex justify-between items-center">
                <div>
                  <span className="text-white font-bold">${accommodation.pricePerNight.toLocaleString()}</span>
                  <span className="text-gray-400 text-xs"> / night</span>
                </div>
                
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  className="px-3 py-1 text-xs rounded bg-gradient-to-r from-purple-600 to-cyan-500 text-white"
                >
                  View Details
                </motion.button>
              </div>
            </motion.div>
          ))}
        </div>
      )}
    </div>
  );
};

// src/components/dashboard/TravelTips.jsx
import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';

const TravelTips = ({ tips, destination }) => {
  const [currentTipIndex, setCurrentTipIndex] = useState(0);
  
  // Auto-rotate tips every 10 seconds
  useEffect(() => {
    if (!tips || tips.length <= 1) return;
    
    const interval = setInterval(() => {
      setCurrentTipIndex((prevIndex) => (prevIndex + 1) % tips.length);
    }, 10000);
    
    return () => clearInterval(interval);
  }, [tips]);
  
  if (!tips || tips.length === 0) {
    return (
      <div className="travel-tips p-4 rounded-lg bg-gray-800/40 border border-gray-700">
        <h2 className="text-lg font-orbitron text-white mb-2">Travel Tips</h2>
        <p className="text-gray-400 text-sm">
          {destination 
            ? `No tips available for ${destination.name} yet.` 
            : 'Select a destination to see travel tips.'}
        </p>
      </div>
    );
  }
  
  return (
    <div className="travel-tips p-4 rounded-lg bg-gray-800/40 border border-gray-700">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-lg font-orbitron text-white">Travel Tips</h2>
        <div className="flex items-center">
          {tips.map((_, index) => (
            <button
              key={index}
              className={`w-2 h-2 rounded-full mx-1 ${
                index === currentTipIndex ? 'bg-cyan-400' : 'bg-gray-600'
              }`}
              onClick={() => setCurrentTipIndex(index)}
            />
          ))}
        </div>
      </div>
      
      <div className="tip-container h-24 relative overflow-hidden">
        <AnimatePresence mode="wait">
          <motion.div
            key={currentTipIndex}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            transition={{ duration: 0.3 }}
            className="absolute inset-0"
          >
            <div className={`p-3 rounded-lg ${
              tips[currentTipIndex].category === 'safety' ? 'bg-red-900/20 border border-red-800/50' :
              tips[currentTipIndex].category === 'packing' ? 'bg-amber-900/20 border border-amber-800/50' :
              tips[currentTipIndex].category === 'experience' ? 'bg-cyan-900/20 border border-cyan-800/50' :
              tips[currentTipIndex].category === 'health' ? 'bg-green-900/20 border border-green-800/50' :
              'bg-purple-900/20 border border-purple-800/50'
            }`}>
              <div className="flex items-start gap-3">
                <div className={`flex-shrink-0 p-2 rounded-full ${
                  tips[currentTipIndex].category === 'safety' ? 'bg-red-800/30 text-red-400' :
                  tips[currentTipIndex].category === 'packing' ? 'bg-amber-800/30 text-amber-400' :
                  tips[currentTipIndex].category === 'experience' ? 'bg-cyan-800/30 text-cyan-400' :
                  tips[currentTipIndex].category === 'health' ? 'bg-green-800/30 text-green-400' :
                  'bg-purple-800/30 text-purple-400'
                }`}>
                  {tips[currentTipIndex].category === 'safety' ? (
                    <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                    </svg>
                  ) : tips[currentTipIndex].category === 'packing' ? (
                    <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4" />
                    </svg>
                  ) : tips[currentTipIndex].category === 'experience' ? (
                    <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14.828 14.828a4 4 0 01-5.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  ) : tips[currentTipIndex].category === 'health' ? (
                    <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                    </svg>
                  ) : (
                    <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  )}
                </div>
                <div>
                  <p className="text-white text-sm">{tips[currentTipIndex].tip}</p>
                  <p className="text-gray-400 text-xs mt-1 capitalize">{tips[currentTipIndex].category} Tip</p>
                </div>
              </div>
            </div>
          </motion.div>
        </AnimatePresence>
      </div>
      
      <div className="tip-navigation flex justify-between mt-4">
        <button
          className="text-gray-400 hover:text-white focus:outline-none"
          onClick={() => setCurrentTipIndex((prevIndex) => (prevIndex - 1 + tips.length) % tips.length)}
        >
          <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
          </svg>
        </button>
        <button
          className="text-gray-400 hover:text-white focus:outline-none"
          onClick={() => setCurrentTipIndex((prevIndex) => (prevIndex + 1) % tips.length)}
        >
          <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
          </svg>
        </button>
      </div>
    </div>
  );
};

// src/components/dashboard/BookingHistory.jsx
import React, { useState } from 'react';
import { motion } from 'framer-motion';

const BookingHistory = ({ bookings }) => {
  const [expandedBookingId, setExpandedBookingId] = useState(null);
  
  const toggleBookingDetails = (bookingId) => {
    setExpandedBookingId(expandedBookingId === bookingId ? null : bookingId);
  };
  
  if (!bookings || bookings.length === 0) {
    return (
      <div className="booking-history">
        <h2 className="text-xl font-orbitron text-white mb-4">Booking History</h2>
        <div className="empty-state p-6 rounded-lg bg-gray-800/30 border border-gray-700 text-center">
          <p className="text-gray-400">No previous bookings found</p>
        </div>
      </div>
    );
  }
  
  return (
    <div className="booking-history">
      <h2 className="text-xl font-orbitron text-white mb-4">Booking History</h2>
      
      <div className="bookings-list space-y-4">
        {bookings.map((booking) => (
          <motion.div 
            key={booking._id}
            className="booking-item rounded-lg bg-gray-800/40 border border-gray-700 overflow-hidden"
            initial={{ height: 'auto' }}
            animate={{ height: 'auto' }}
          >
            <div 
              className="booking-header p-4 flex justify-between items-center cursor-pointer"
              onClick={() => toggleBookingDetails(booking._id)}
            >
              <div>
                <h3 className="text-white font-medium">{booking.destination.name}</h3>
                <p className="text-gray-400 text-sm">
                  {new Date(booking.departureDate).toLocaleDateString(undefined, { 
                    month: 'short', 
                    day: 'numeric',
                    year: 'numeric'
                  })}
                </p>
              </div>
              
              <div className="flex items-center">
                <span className={`px-2 py-1 rounded text-xs font-medium mr-3 ${
                  booking.status === 'completed' ? 'bg-green-900/40 text-green-400' :
                  booking.status === 'cancelled' ? 'bg-red-900/40 text-red-400' :
                  'bg-blue-900/40 text-blue-400'
                }`}>
                  {booking.status.charAt(0).toUpperCase() + booking.status.slice(1)}
                </span>
                
                <svg 
                  className={`w-5 h-5 text-gray-400 transform transition-transform ${
                    expandedBookingId === booking._id ? 'rotate-180' : ''
                  }`} 
                  fill="none" 
                  viewBox="0 0 24 24" 
                  stroke="currentColor"
                >
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                </svg>
              </div>
            </div>
            
            {expandedBookingId === booking._id && (
              <motion.div 
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: 'auto' }}
                exit={{ opacity: 0, height: 0 }}
                className="booking-details border-t border-gray-700 p-4"
              >
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <h4 className="text-gray-400 text-sm mb-2">Trip Details</h4>
                    <ul className="space-y-2 text-sm">
                      <li className="flex justify-between">
                        <span className="text-gray-500">Booking ID:</span>
                        <span className="text-white">{booking._id.substring(0, 8)}</span>
                      </li>
                      <li className="flex justify-between">
                        <span className="text-gray-500">Destination:</span>
                        <span className="text-white">{booking.destination.name}</span>
                      </li>
                      <li className="flex justify-between">
                        <span className="text-gray-500">Departure:</span>
                        <span className="text-white">
                          {new Date(booking.departureDate).toLocaleDateString()}
                        </span>
                      </li>
                      <li className="flex justify-between">
                        <span className="text-gray-500">Class:</span>
                        <span className="text-white capitalize">{booking.seatClass}</span>
                      </li>
                      <li className="flex justify-between">
                        <span className="text-gray-500">Total Price:</span>
                        <span className="text-cyan-400">${booking.totalPrice.toLocaleString()}</span>
                      </li>
                    </ul>
                  </div>
                  
                  <div>
                    <h4 className="text-gray-400 text-sm mb-2">Passengers</h4>
                    <div className="space-y-2">
                      {booking.passengers.map((passenger, index) => (
                        <div key={index} className="p-2 rounded bg-gray-800 text-sm">
                          <p className="text-white">{passenger.name}</p>
                          <p className="text-gray-500 text-xs">{passenger.email}</p>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
                
                {booking.status !== 'cancelled' && booking.status !== 'completed' && (
                  <div className="mt-4 flex justify-end">
                    <motion.button
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                      className="px-4 py-2 text-xs rounded border border-purple-500 text-purple-400 hover:bg-purple-500/20"
                    >
                      View Ticket
                    </motion.button>
                  </div>
                )}
              </motion.div>
            )}
          </motion.div>
        ))}
      </div>
    </div>
  );
};
